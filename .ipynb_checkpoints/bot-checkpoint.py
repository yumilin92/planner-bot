import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7785269679:AAEWCaV5cMslIsqtev94OkzA9gZApKeKefI"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
TASKS_FILE = "tasks.json"

def load_tasks():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if os.path.exists(TASKS_FILE):
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_tasks():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON-—Ñ–∞–π–ª"""
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=4)

def clear_old_tasks():
    """–û—á–∏—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ 00:00"""
    global tasks
    current_date = datetime.now().strftime("%Y-%m-%d")
    if "date" not in tasks or tasks["date"] != current_date:
        tasks = {"date": current_date}
        save_tasks()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
tasks = load_tasks()
clear_old_tasks()

@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–ª–∞–Ω–µ—Ä-–±–æ—Ç. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏?")

@dp.message(Command("list"))
async def list_tasks(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    user_id = str(message.from_user.id)

    if user_id not in tasks or not tasks[user_id]:
        await message.answer("üìú –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    task_list = "\n".join([f"{i+1}. {'‚úÖ' if task['done'] else '‚ùå'} {task['task']}" for i, task in enumerate(tasks[user_id])])
    await message.answer(f"üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")

@dp.message(Command("done"))
async def mark_done(message: Message):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    user_id = str(message.from_user.id)
    args = message.text.split()

    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /done. –ü—Ä–∏–º–µ—Ä: /done 2")
        return

    task_index = int(args[1]) - 1

    if user_id not in tasks or task_index < 0 or task_index >= len(tasks[user_id]):
        await message.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ /list.")
        return

    tasks[user_id][task_index]["done"] = True
    save_tasks()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

@dp.message(Command("delete"))
async def delete_task(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É"""
    user_id = str(message.from_user.id)
    args = message.text.split()

    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1")
        return

    task_index = int(args[1]) - 1

    if user_id not in tasks or task_index < 0 or task_index >= len(tasks[user_id]):
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    deleted_task = tasks[user_id].pop(task_index)
    save_tasks()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_task['task']}")

@dp.message(lambda message: message.text.startswith("/add"))
async def add_task(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    user_id = str(message.from_user.id)
    task_text = message.text[len("/add "):].strip()

    if not task_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    if user_id not in tasks:
        tasks[user_id] = []

    tasks[user_id].append({"task": task_text, "done": False})
    save_tasks()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
